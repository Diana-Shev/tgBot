// package main

// import (
// 	"bytes"         // –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–æ–≤—ã–º–∏ –±—É—Ñ–µ—Ä–∞–º–∏(–Ω—É–∂–Ω–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞)
// 	"encoding/json" // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON –∏ –æ–±—Ä–∞—Ç–Ω–æ
// 	"fmt"           // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
// 	"io/ioutil"     // —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
// 	"log"
// 	"net/http" // –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç http- –∑–∞–ø—Ä–æ—Å—ã
// 	"os"       // –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
// 	"strings"
// 	"time"

// 	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
// 	"github.com/joho/godotenv"
// )

// // —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å JSON-–∑–∞–ø—Ä–æ—Å

// type Message struct {
// 	Role string `json:"role"`
// 	Text string `json:"text"`
// }

// type CompletionOptions struct {
// 	Stream      bool    `json:"stream"`      // –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç—è–º, –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º (false)
// 	Temperature float64 `json:"temperature"` // —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏, —à–∞–≥ 0.3, 0,0 - —Å—Ç—Ä–æ–≥–æ, 1,0 —Ö–∞–æ—Ç–∏—á–Ω–æ
// 	MaxTokens   int     `json:"maxTokens"`   // –º–∞–∫—Å –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
// }

// type GPTRequest struct {
// 	ModelUri          string            `json:"modelUri"`          // –∞–¥—Ä–µ—Å –º–æ–¥–µ–ª–∏
// 	CompletionOptions CompletionOptions `json:"completionOptions"` // –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
// 	Messages          []Message         `json:"messages"`          // —Å–æ–æ–±–µ—â–Ω–∏—è –≤ —á–∞—Ç–µ
// }

// type Session struct {
// 	Topics         []string // 10 —Ç–µ–º –æ—Ç GPT
// 	SelectedTopics []int    // –∏–Ω–¥–µ–∫—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º
// }

// var sessions = make(map[int64]*Session) // –∫–ª—é—á chatID

// func askYandexGPT(userText string) (string, error) { // –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GPT –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç
// 	apiKey := os.Getenv("YANDEX_API_KEY")
// 	folderID := os.Getenv("YANDEX_FOLDER_ID")

// 	url := "https://llm.api.cloud.yandex.net/foundationModels/v1/completion" //url –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å GPT

// 	requestBody := GPTRequest{ // —Ñ–æ—Ä–º–∏—Ä—É–µ–º JSON- –∑–∞–ø—Ä–æ—Å
// 		ModelUri: fmt.Sprintf("gpt://%s/yandexgpt-lite", folderID),
// 		CompletionOptions: CompletionOptions{
// 			Stream:      false,
// 			Temperature: 0.7,
// 			MaxTokens:   300, // 100
// 		},
// 		Messages: []Message{
// 			{Role: "user", Text: userText},
// 		},
// 	}

// 	jsonData, err := json.Marshal(requestBody) //–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ GPTRequest –≤ JSON (–≤ –±–∞–π—Ç–∞—Ö), —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
// 	if err != nil {
// 		return "", err
// 	}

// 	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData)) //—Å–æ–∑–¥–∞—é POST- –∑–∞–ø—Ä–æ—Å —Å —ç—Ç–∏–º JSON-–æ–º
// 	if err != nil {
// 		return "", err
// 	}

// 	// –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–∞–∫ –≤ Postman
// 	req.Header.Set("Authorization", "Api-Key "+apiKey)
// 	req.Header.Set("Content-Type", "application/json")
// 	req.Header.Set("x-folder-id", folderID)

// 	client := &http.Client{}    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ YGPT
// 	resp, err := client.Do(req) // –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
// 	if err != nil {
// 		return "", err
// 	}
// 	defer resp.Body.Close()

// 	body, _ := ioutil.ReadAll(resp.Body)

// 	var result map[string]interface{} // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-–æ—Ç–≤–µ—Ç –æ—Ç GPT –≤ map
// 	err = json.Unmarshal(body, &result)
// 	if err != nil {
// 		return "", err
// 	}

// 	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
// 	text := "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω"
// 	if r, ok := result["result"].(map[string]interface{}); ok {
// 		if alternatives, ok := r["alternatives"].([]interface{}); ok && len(alternatives) > 0 {
// 			msg := alternatives[0].(map[string]interface{})["message"].(map[string]interface{})
// 			text = msg["text"].(string)
// 		}
// 	}

// 	return text, nil
// }

// func main() {
// 	err := godotenv.Load() //–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
// 	if err != nil {
// 		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
// 	}

// 	InitDatabase() // –ø–æ–¥–∫–ª—é—á–∞–µ–º –ë–î

// 	botToken := os.Getenv("TELEGRAM_BOT_TOKEN") //–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ tgBot API —Å —Ç–æ–∫–µ–Ω–æ–º
// 	bot, err := tgbotapi.NewBotAPI(botToken)
// 	if err != nil {
// 		log.Panic(err)
// 	}

// 	log.Printf(" –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: %s", bot.Self.UserName)

// 	u := tgbotapi.NewUpdate(0) // –≥–æ—Ç–æ–≤–∏–º –±–æ—Ç–∞ –∫ –ø—Ä–∏–µ–º—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞
// 	u.Timeout = 60
// 	updates := bot.GetUpdatesChan(u)

// 	for update := range updates { // –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
// 		if update.Message != nil && update.Message.IsCommand() {
// 			switch update.Message.Command() {
// 			case "start":
// 				reply := "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–º—ã, –ø–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É..."

// 				msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
// 				bot.Send(msg)

// 				// –ó–∞–ø—Ä–æ—Å –∫ GPT: —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 —Ç–µ–º
// 				topicsText, err := askYandexGPT("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π. –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑ 2 –∏–ª–∏ 3 —Å–ª–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫—É–ª–∏–Ω–∞—Ä–∏—è. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–∏—Ä–æ–∂–∫–∞—Ö.")
// 				if err != nil {
// 					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º: "+err.Error()))
// 					fmt.Println("GPT ERROR:", err)
// 					continue
// 				}

// 				fmt.Println("GPT –û–¢–í–ï–¢:", topicsText)

// 				if err != nil {
// 					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º: "+err.Error()))
// 					continue
// 				}

// 				// –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT
// 				lines := strings.Split(topicsText, "\n")
// 				var topics []string
// 				for _, line := range lines {
// 					line = strings.TrimSpace(line)
// 					if line == "" {
// 						continue
// 					}
// 					// –£–¥–∞–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é (1. –¢–µ–º–∞, 2. –¢–µ–º–∞...)
// 					if i := strings.Index(line, "."); i != -1 {
// 						line = strings.TrimSpace(line[i+1:])
// 					}
// 					topics = append(topics, line)
// 				}

// 				// –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 10 –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
// 				if len(topics) > 10 {
// 					topics = topics[:10]
// 				}

// 				chatID := update.Message.Chat.ID
// 				sessions[chatID] = &Session{
// 					Topics:         topics,
// 					SelectedTopics: []int{},
// 				}

// 				// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–º
// 				var rows [][]tgbotapi.InlineKeyboardButton
// 				for i, topic := range topics {
// 					btn := tgbotapi.NewInlineKeyboardButtonData(topic, fmt.Sprintf("topic_%d", i))
// 					rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
// 				}

// 				// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Restart
// 				restartBtn := tgbotapi.NewInlineKeyboardButtonData("üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "restart")
// 				rows = append(rows, tgbotapi.NewInlineKeyboardRow(restartBtn))

// 				keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
// 				msgWithButtons := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏ 3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–º—ã:")
// 				msgWithButtons.ReplyMarkup = keyboard

// 				_, sendErr := bot.Send(msgWithButtons)
// 				if sendErr != nil {
// 					fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", sendErr)
// 				}

// 				continue
// 			}
// 		}

// 		if update.CallbackQuery != nil {
// 			callback := update.CallbackQuery
// 			data := callback.Data // —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

// 			//  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
// 			if data == "restart" {
// 				msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "üîÅ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ —Ç–µ–º—ã...")
// 				bot.Send(msg)

// 				topicsText, err := askYandexGPT("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π. –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑ 2 –∏–ª–∏ 3 —Å–ª–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫—É–ª–∏–Ω–∞—Ä–∏—è. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–∏—Ä–æ–∂–∫–∞—Ö")
// 				if err != nil {
// 					bot.Send(tgbotapi.NewMessage(callback.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º: "+err.Error()))
// 					return
// 				}

// 				// –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
// 				lines := strings.Split(topicsText, "\n")
// 				var topics []string
// 				for _, line := range lines {
// 					line = strings.TrimSpace(line)
// 					if line == "" {
// 						continue
// 					}
// 					if i := strings.Index(line, "."); i != -1 {
// 						line = strings.TrimSpace(line[i+1:])
// 					}
// 					topics = append(topics, line)
// 				}

// 				if len(topics) > 10 {
// 					topics = topics[:10]
// 				}

// 				var rows [][]tgbotapi.InlineKeyboardButton
// 				for i, topic := range topics {
// 					btn := tgbotapi.NewInlineKeyboardButtonData(topic, fmt.Sprintf("topic_%d", i))
// 					rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
// 				}

// 				restartBtn := tgbotapi.NewInlineKeyboardButtonData("üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "restart")
// 				rows = append(rows, tgbotapi.NewInlineKeyboardRow(restartBtn))

// 				chatID := callback.Message.Chat.ID
// 				sessions[chatID] = &Session{
// 					Topics:         topics,
// 					SelectedTopics: []int{},
// 				}

// 				keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
// 				msgWithButtons := tgbotapi.NewMessage(callback.Message.Chat.ID, "–í—ã–±–µ—Ä–∏ 3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–º—ã:")
// 				msgWithButtons.ReplyMarkup = keyboard
// 				bot.Send(msgWithButtons)

// 				return
// 			}

// 			// –≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∂–∏–º–∞–µ—Ç—Å—è –ª–∏ –∫–Ω–æ–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã

// 			if strings.HasPrefix(data, "topic_") {
// 				ack := tgbotapi.NewCallback(callback.ID, "")
// 				bot.Request(ack)

// 				chatID := callback.Message.Chat.ID
// 				session, exists := sessions[chatID]
// 				if !exists || len(session.Topics) == 0 {
// 					bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start."))
// 					return
// 				}

// 				i := 0
// 				fmt.Sscanf(data, "topic_%d", &i)

// 				// –£–∂–µ –≤—ã–±—Ä–∞–Ω–∞?
// 				for _, v := range session.SelectedTopics {
// 					if v == i {
// 						bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –≠—Ç–∞ —Ç–µ–º–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞."))
// 						return
// 					}
// 				}

// 				session.SelectedTopics = append(session.SelectedTopics, i)

// 				if len(session.SelectedTopics) < 3 {
// 					topic := session.Topics[i]
// 					reply := fmt.Sprintf("‚úÖ –¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: %s (%d –∏–∑ 3)", topic, len(session.SelectedTopics))
// 					bot.Send(tgbotapi.NewMessage(chatID, reply))
// 					return
// 				}

// 				// –ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω–æ 3 —Ç–µ–º—ã
// 				var rows [][]tgbotapi.InlineKeyboardButton
// 				for _, idx := range session.SelectedTopics {
// 					topic := session.Topics[idx]
// 					btn := tgbotapi.NewInlineKeyboardButtonData(topic, fmt.Sprintf("chosen_%d", idx))
// 					rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
// 				}

// 				keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
// 				msg := tgbotapi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é:")
// 				msg.ReplyMarkup = keyboard
// 				bot.Send(msg)

// 				return
// 			}

// 		}

// 		if update.Message == nil { //–µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –ù–ï —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(—Ç–∏–ø–æ —Ñ–æ—Ç–æ), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
// 			continue
// 		}

// 		userMessage := update.Message.Text          // –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// 		replyText, err := askYandexGPT(userMessage) // –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ GPT
// 		status := "—É—Å–ø–µ—Ö"
// 		if err != nil {
// 			replyText = " –û—à–∏–±–∫–∞: " + err.Error()
// 			status = "–û—à–∏–±–∫–∞"
// 		}

// 		// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î
// 		_, dbErr := DB.Exec(`
// 			INSERT INTO requests (username, timestamp, user_text, gpt_response, status)
// 			VALUES ($1, $2, $3, $4, $5)
// 		`, update.Message.From.UserName, time.Now().Format(time.RFC3339), userMessage, replyText, status)

// 		if dbErr != nil {
// 			log.Println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î:", dbErr)
// 		}
// 		msg := tgbotapi.NewMessage(update.Message.Chat.ID, replyText) // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ telegram –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
// 		bot.Send(msg)
// 	}
// }

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex GPT

type Message struct {
	Role string `json:"role"`
	Text string `json:"text"`
}

type CompletionOptions struct {
	Stream      bool    `json:"stream"`
	Temperature float64 `json:"temperature"`
	MaxTokens   int     `json:"maxTokens"`
}

type GPTRequest struct {
	ModelUri          string            `json:"modelUri"`
	CompletionOptions CompletionOptions `json:"completionOptions"`
	Messages          []Message         `json:"messages"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

type Session struct {
	Topics         []string
	SelectedTopics []int
}

var sessions = make(map[int64]*Session) // —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

func askYandexGPT(userText string) (string, error) {
	apiKey := os.Getenv("YANDEX_API_KEY")
	folderID := os.Getenv("YANDEX_FOLDER_ID")
	url := "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

	requestBody := GPTRequest{
		ModelUri: fmt.Sprintf("gpt://%s/yandexgpt-lite", folderID),
		CompletionOptions: CompletionOptions{
			Stream:      false,
			Temperature: 0.7,
			MaxTokens:   300,
		},
		Messages: []Message{{Role: "user", Text: userText}},
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", err
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", err
	}

	req.Header.Set("Authorization", "Api-Key "+apiKey)
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("x-folder-id", folderID)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)

	var result map[string]interface{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return "", err
	}

	text := "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω"
	if r, ok := result["result"].(map[string]interface{}); ok {
		if alternatives, ok := r["alternatives"].([]interface{}); ok && len(alternatives) > 0 {
			msg := alternatives[0].(map[string]interface{})["message"].(map[string]interface{})
			text = msg["text"].(string)
		}
	}

	return text, nil
}

func main() {
	_ = godotenv.Load()

	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	log.Printf(" –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil && update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–º—ã, –ø–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É...")
				bot.Send(msg)

				topicsText, err := askYandexGPT("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π. –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑ 2 –∏–ª–∏ 3 —Å–ª–æ–≤.")
				if err != nil {
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º: "+err.Error()))
					continue
				}

				lines := strings.Split(topicsText, "\n")
				var topics []string
				for _, line := range lines {
					line = strings.TrimSpace(line)
					if line == "" {
						continue
					}
					if i := strings.Index(line, "."); i != -1 {
						line = strings.TrimSpace(line[i+1:])
					}
					topics = append(topics, line)
				}

				if len(topics) > 10 {
					topics = topics[:10]
				}

				sessions[update.Message.Chat.ID] = &Session{Topics: topics, SelectedTopics: []int{}}

				var rows [][]tgbotapi.InlineKeyboardButton
				for i, topic := range topics {
					btn := tgbotapi.NewInlineKeyboardButtonData(topic, fmt.Sprintf("topic_%d", i))
					rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
				}
				restartBtn := tgbotapi.NewInlineKeyboardButtonData("üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "restart")
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(restartBtn))

				keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
				msgWithButtons := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏ 3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–º—ã:")
				msgWithButtons.ReplyMarkup = keyboard
				bot.Send(msgWithButtons)
			}
		}

		if update.CallbackQuery != nil {
			callback := update.CallbackQuery
			data := callback.Data
			chatID := callback.Message.Chat.ID
			ack := tgbotapi.NewCallback(callback.ID, "")
			bot.Request(ack)

			if data == "restart" {
				topicsText, err := askYandexGPT("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π. –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑ 2 –∏–ª–∏ 3 —Å–ª–æ–≤.")
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º: "+err.Error()))
					continue
				}

				lines := strings.Split(topicsText, "\n")
				var topics []string
				for _, line := range lines {
					line = strings.TrimSpace(line)
					if line == "" {
						continue
					}
					if i := strings.Index(line, "."); i != -1 {
						line = strings.TrimSpace(line[i+1:])
					}
					topics = append(topics, line)
				}

				if len(topics) > 10 {
					topics = topics[:10]
				}

				sessions[chatID] = &Session{Topics: topics, SelectedTopics: []int{}}

				var rows [][]tgbotapi.InlineKeyboardButton
				for i, topic := range topics {
					btn := tgbotapi.NewInlineKeyboardButtonData(topic, fmt.Sprintf("topic_%d", i))
					rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
				}
				restartBtn := tgbotapi.NewInlineKeyboardButtonData("üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "restart")
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(restartBtn))

				keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
				msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏ 3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–º—ã:")
				msg.ReplyMarkup = keyboard
				bot.Send(msg)
				continue
			}

			if strings.HasPrefix(data, "topic_") {
				index := 0
				fmt.Sscanf(data, "topic_%d", &index)
				session, exists := sessions[chatID]
				if !exists {
					bot.Send(tgbotapi.NewMessage(chatID, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /start."))
					continue
				}
				for _, v := range session.SelectedTopics {
					if v == index {
						bot.Send(tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –≠—Ç–∞ —Ç–µ–º–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞."))
						return
					}
				}
				session.SelectedTopics = append(session.SelectedTopics, index)
				if len(session.SelectedTopics) < 3 {
					topic := session.Topics[index]
					bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: %s (%d –∏–∑ 3)", topic, len(session.SelectedTopics))))
					continue
				}
				var rows [][]tgbotapi.InlineKeyboardButton
				for _, idx := range session.SelectedTopics {
					topic := session.Topics[idx]
					btn := tgbotapi.NewInlineKeyboardButtonData(topic, fmt.Sprintf("chosen_%d", idx))
					rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
				}
				keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
				msg := tgbotapi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é:")
				msg.ReplyMarkup = keyboard
				bot.Send(msg)
				continue
			}
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
		}
	}
}

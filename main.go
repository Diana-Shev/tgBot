package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT

type Message struct {
	Role string `json:"role"`
	Text string `json:"text"`
}

type CompletionOptions struct {
	Stream      bool    `json:"stream"`
	Temperature float64 `json:"temperature"`
	MaxTokens   int     `json:"maxTokens"`
}

type GPTRequest struct {
	ModelUri          string            `json:"modelUri"`
	CompletionOptions CompletionOptions `json:"completionOptions"`
	Messages          []Message         `json:"messages"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

type Session struct {
	Topics           []string
	SelectedTopics   []int
	ChosenIndex      int
	CurrentUser      string // —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –∏–ª–∏ 2
	CurrentQuestion  int    // –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
	FirstUserAnswer  []string
	SecondUserAnswer []string
	IsFinished       bool     // –æ–±–∞ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
	RefinedTopics    []string // —Ç–µ–º—ã –ø–æ –º—ç—Ç—á—É
}

var sessions = make(map[int64]*Session)

// var GlobalTopics = []string{
// 	"–∂–∏–≤–æ—Ç–Ω—ã–µ", "–∞–≤—Ç–æ–º–æ–±–∏–ª–∏", "–µ–¥–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–º—É–∑—ã–∫–∞",
// 	"–∫–∏–Ω–æ", "—Å–ø–æ—Ä—Ç", "–∫–æ—Å–º–æ—Å", "–º–æ–¥–∞", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
// }

func askYandexGPT(userText string, maxTokens int) (string, error) {
	apiKey := os.Getenv("YANDEX_API_KEY")
	folderID := os.Getenv("YANDEX_FOLDER_ID")

	url := "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

	requestBody := GPTRequest{
		ModelUri: fmt.Sprintf("gpt://%s/yandexgpt-lite", folderID),
		CompletionOptions: CompletionOptions{
			Stream:      false,
			Temperature: 0.7,
			MaxTokens:   maxTokens,
		},
		Messages: []Message{{Role: "user", Text: userText}},
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", err
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", err
	}

	req.Header.Set("Authorization", "Api-Key "+apiKey)
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("x-folder-id", folderID)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)

	var result map[string]interface{}
	err = json.Unmarshal(body, &result)
	if err != nil {
		return "", err
	}

	text := "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω"
	if r, ok := result["result"].(map[string]interface{}); ok {
		if alternatives, ok := r["alternatives"].([]interface{}); ok && len(alternatives) > 0 {
			msg := alternatives[0].(map[string]interface{})["message"].(map[string]interface{})
			text = msg["text"].(string)
		}
	}

	return text, nil
}

func generatePopularTopics() ([]string, error) {
	prompt := "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ –æ—Ç 20 –¥–æ 40 –ª–µ—Ç. –¢–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏. –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–∞–∂–¥–∞—è —Ç–µ–º–∞ ‚Äî 1-2 —Å–ª–æ–≤–∞, –±–µ–∑ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: 1. –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
	response, err := askYandexGPT(prompt, 400)
	if err != nil {
		return nil, err
	}

	lines := strings.Split(response, "\n")
	topics := []string{}
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if i := strings.Index(line, "."); i != -1 {
			line = strings.TrimSpace(line[i+1:])
		}
		if line != "" {
			topics = append(topics, line)
		}
	}
	if len(topics) > 10 {
		topics = topics[:10]
	}
	return topics, nil
}

func sendInterestQuestion(bot *tgbotapi.BotAPI, chatID int64) {
	session := sessions[chatID]
	if session.CurrentQuestion >= len(session.Topics) {
		if session.CurrentUser == "first" { // –ø–µ—Ä–≤—ã–π –∑–∞–∫–æ–Ω—á–∏–ª –æ–ø—Ä–æ—Å
			bot.Send(tgbotapi.NewMessage(chatID, "–ü–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å. –ù–∞–ø–∏—à–∏ /next, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–æ–π!"))

		} else if session.CurrentUser == "second" {
			session.IsFinished = true
			common := getCommonInterests(session.FirstUserAnswer, session.SecondUserAnswer)

			if len(common) == 0 {
				bot.Send(tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ üò¢"))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –µ—Å—Ç—å –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: "+strings.Join(common, ", ")))
				bot.Send(tgbotapi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –æ–±—â–∏–µ —Ç–µ–º—ã."))

				// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ç–æ—á–Ω—ë–Ω–Ω—ã–µ —Ç–µ–º—ã —É GPT
				prompt := fmt.Sprintf(`–î–ª—è –∫–∞–∂–¥–æ–π –∏–∑ —Ç–µ–º: %s ‚Äî –ø—Ä–∏–¥—É–º–∞–π –ø–æ 3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ–¥—Ç–µ–º—ã(–Ω–∞–∑–≤–∞–Ω–∏–µ 1-2 —Å–ª–æ–≤–∞), –≤–∫–ª—é—á–∞—è –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏ —Ä–µ–¥–∫–∏–µ. –°—Ç—Ä–æ–≥–æ –≤—ã–≤–µ–¥–∏ —Å–ø–∏—Å–∫–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
				<–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞>: –ø–æ–¥—Ç–µ–º–∞1, –ø–æ–¥—Ç–µ–º–∞2, –ø–æ–¥—Ç–µ–º–∞3
				–ù–∏–∫–∞–∫–∏—Ö –Ω—É–º–µ—Ä–∞—Ü–∏–π, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞`, strings.Join(common, ", "))
				refined, err := askYandexGPT(prompt, 400)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, " –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ —Ç–µ–º: "+err.Error()))
					return
				}

				// –ü–∞—Ä—Å–∏–º –ø–æ–¥—Ç–µ–º—ã
				fmt.Println("GPT –æ—Ç–≤–µ—Ç –ø–æ —É—Ç–æ—á–Ω—ë–Ω–Ω—ã–º —Ç–µ–º–∞–º:\n" + refined)

				// –ü–∞—Ä—Å–∏–º —É—Ç–æ—á–Ω—ë–Ω–Ω—ã–µ —Ç–µ–º—ã
				lines := strings.Split(refined, "\n")
				session.RefinedTopics = []string{}
				for _, line := range lines {
					line = strings.TrimSpace(line)
					if line == "" {
						continue
					}

					// –£–¥–∞–ª–∏–º –∑–≤—ë–∑–¥–æ—á–∫–∏ –∏ "–ø–æ–¥—Ç–µ–º–∞1:" / "–ø–æ–¥—Ç–µ–º–∞2:"
					line = strings.TrimPrefix(line, "*")
					if i := strings.Index(line, ":"); i != -1 {
						line = line[i+1:]
					}

					// –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ –≤—Å—ë –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ø–æ–ª–∏–∞–º–æ—Ä–∏—è (–æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è)" ‚Üí "–ø–æ–ª–∏–∞–º–æ—Ä–∏—è")
					if idx := strings.Index(line, "("); idx != -1 {
						line = line[:idx]
					}

					// –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—ã
					line = strings.TrimSpace(line)
					line = strings.Trim(line, ".,; ")

					if line != "" {
						session.RefinedTopics = append(session.RefinedTopics, line)
					}
				}

				//  –ü—Ä–æ–≤–µ—Ä—è–µ–º
				if len(session.RefinedTopics) == 0 {
					bot.Send(tgbotapi.NewMessage(chatID, " –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Ç–æ—á–Ω—ë–Ω–Ω—ã–µ —Ç–µ–º—ã."))
					return
				}

				//  –∫–Ω–æ–ø–∫–∏
				rows := [][]tgbotapi.InlineKeyboardButton{}
				for i, t := range session.RefinedTopics {
					btn := tgbotapi.NewInlineKeyboardButtonData(t, fmt.Sprintf("refined_%d", i))
					rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
				}
				keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
				msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:")
				msg.ReplyMarkup = keyboard
				bot.Send(msg)
			}

		}
		return
	}

	question := fmt.Sprintf("–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è %s?", session.Topics[session.CurrentQuestion])
	yesBtn := tgbotapi.NewInlineKeyboardButtonData("–î–∞", "yes")
	noBtn := tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "no")
	row := tgbotapi.NewInlineKeyboardRow(yesBtn, noBtn)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(row)

	msg := tgbotapi.NewMessage(chatID, question)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func getCommonInterests(first, second []string) []string {
	common := []string{}
	set := make(map[string]bool)

	for _, t := range first {
		set[t] = true
	}
	for _, t := range second {
		if set[t] {
			common = append(common, t)
		}
	}

	return common
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	InitDatabase()

	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	log.Printf(" –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {

		if update.CallbackQuery != nil {

			callback := update.CallbackQuery
			data := callback.Data
			chatID := callback.Message.Chat.ID

			ack := tgbotapi.NewCallback(callback.ID, "")
			bot.Request(ack)

			if data == "yes" || data == "no" {
				session := sessions[chatID]
				topic := session.Topics[session.CurrentQuestion]

				if session.CurrentUser == "first" {
					if data == "yes" {
						session.FirstUserAnswer = append(session.FirstUserAnswer, topic)
					}
				} else if session.CurrentUser == "second" {
					if data == "yes" {
						session.SecondUserAnswer = append(session.SecondUserAnswer, topic)
					}
				}

				session.CurrentQuestion++
				sendInterestQuestion(bot, chatID)
				continue
			}

			if data == "restart" {
				topicsText, err := askYandexGPT("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–∞—Ö. –û—Ç–≤–µ—Ç –≤—ã–¥–∞–π –≤ –≤–∏–¥–µ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑ 2 –∏–ª–∏ 3 —Å–ª–æ–≤.", 300)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, " –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º: "+err.Error()))
					continue
				}

				lines := strings.Split(topicsText, "\n")
				topics := make([]string, 0, 10)
				for _, line := range lines {
					line = strings.TrimSpace(line)
					if i := strings.Index(line, "."); i != -1 {
						line = strings.TrimSpace(line[i+1:])
					}
					if line != "" {
						topics = append(topics, line)
					}
				}
				if len(topics) > 10 {
					topics = topics[:10]
				}

				sessions[chatID] = &Session{Topics: topics, SelectedTopics: []int{}, ChosenIndex: -1}
				rows := [][]tgbotapi.InlineKeyboardButton{}
				for i, topic := range topics {
					btn := tgbotapi.NewInlineKeyboardButtonData(topic, fmt.Sprintf("topic_%d", i))
					rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
				}
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "restart")))

				keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
				msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏ 3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–º—ã:")
				msg.ReplyMarkup = keyboard
				bot.Send(msg)
				continue
			}

			if strings.HasPrefix(data, "topic_") {
				var index int
				fmt.Sscanf(data, "topic_%d", &index)
				sess := sessions[chatID]
				for _, v := range sess.SelectedTopics {
					if v == index {
						bot.Send(tgbotapi.NewMessage(chatID, " –≠—Ç–∞ —Ç–µ–º–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞."))
						continue
					}
				}
				sess.SelectedTopics = append(sess.SelectedTopics, index)
				if len(sess.SelectedTopics) <= 3 {
					topic := sess.Topics[index]
					bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: %s (%d –∏–∑ 3)", topic, len(sess.SelectedTopics))))
					if len(sess.SelectedTopics) <= 2 {
						continue
					}
				}

				rows := [][]tgbotapi.InlineKeyboardButton{}
				for _, i := range sess.SelectedTopics {
					text := sess.Topics[i]
					btn := tgbotapi.NewInlineKeyboardButtonData(text, fmt.Sprintf("chosen_%d", i))
					rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
				}
				keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

				msg := tgbotapi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é:")
				msg.ReplyMarkup = keyboard
				bot.Send(msg)
				continue
			}

			if strings.HasPrefix(data, "chosen_") {
				var index int
				fmt.Sscanf(data, "chosen_%d", &index)
				sess := sessions[chatID]
				sess.ChosenIndex = index
				topic := sess.Topics[index]
				storyPrompt := fmt.Sprintf("–ù–∞–ø–∏—à–∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é, –Ω–æ 100% –ø—Ä–∞–≤–¥–∏–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ —Ç–µ–º–µ ¬´%s¬ª, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞—É—á–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Ñ–∞–∫—Ç–æ–º, –ª–∏–±–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º, –ª–∏–±–æ –ª—é–±–æ–ø—ã—Ç–Ω—ã–π —Ñ–∞–∫—Ç. –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞: –°–æ–¥–µ—Ä–∂–∞—Ç—å —à–æ–∫–∏—Ä—É—é—â–∏–π/–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–∞–º–∏ (—É–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã, –∏–º–µ–Ω–∞, –∏—Å—Ç–æ—á–Ω–∏–∫–∏). –ë—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∞ –≤ —Å—Ç–∏–ª–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –Ω–∞—É—á–Ω–æ-–ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ó–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º. –í—ã–∑—ã–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –ù–µ –ø—Ä–µ–≤—ã—à–∞–π 10000 —Ç–æ–∫–µ–Ω–æ–≤.", topic)
				story, err := askYandexGPT(storyPrompt, 800)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: "+err.Error()))
					continue
				}
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
				username := callback.From.UserName
				_, dbErr := DB.Exec(`
				INSERT INTO requests (username, timestamp, user_text, gpt_response, status)
				VALUES (?, ?, ?, ?, ?)
			`, username,
					time.Now().Format("2006-01-02 15:04:05"),
					topic,
					story,
					"—É—Å–ø–µ—Ö",
				)

				if dbErr != nil {
					log.Println(" –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:", dbErr)
				}

				bot.Send(tgbotapi.NewMessage(chatID, " –ò—Å—Ç–æ—Ä–∏—è –ø–æ —Ç–µ–º–µ \""+topic+"\":\n\n"+story))
				continue
			}

			if strings.HasPrefix(data, "refined_") {
				var index int
				fmt.Sscanf(data, "refined_%d", &index)

				session := sessions[chatID]
				if index < 0 || index >= len(session.RefinedTopics) {
					bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ–º—ã"))
					continue
				}

				selected := session.RefinedTopics[index]

				// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
				prompt := fmt.Sprintf("–ù–∞–ø–∏—à–∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é, –Ω–æ 100% –ø—Ä–∞–≤–¥–∏–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ —Ç–µ–º–µ ¬´%s¬ª, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞—É—á–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Ñ–∞–∫—Ç–æ–º, –ª–∏–±–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º, –ª–∏–±–æ –ª—é–±–æ–ø—ã—Ç–Ω—ã–π —Ñ–∞–∫—Ç. –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞: –°–æ–¥–µ—Ä–∂–∞—Ç—å —à–æ–∫–∏—Ä—É—é—â–∏–π/–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–∞–º–∏ (—É–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã, –∏–º–µ–Ω–∞, –∏—Å—Ç–æ—á–Ω–∏–∫–∏). –ë—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∞ –≤ —Å—Ç–∏–ª–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –Ω–∞—É—á–Ω–æ-–ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ó–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º. –í—ã–∑—ã–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –ù–µ –ø—Ä–µ–≤—ã—à–∞–π 10000 —Ç–æ–∫–µ–Ω–æ–≤.", selected)
				story, err := askYandexGPT(prompt, 800)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: "+err.Error()))
					continue
				}

				bot.Send(tgbotapi.NewMessage(chatID, " –ò—Å—Ç–æ—Ä–∏—è –ø–æ —Ç–µ–º–µ \""+selected+"\":\n\n"+story))

				// –ö–Ω–æ–ø–∫–∏ –¥—Ä—É–≥–∏—Ö —Ç–µ–º + –≤—ã—Ö–æ–¥
				rows := [][]tgbotapi.InlineKeyboardButton{}
				for i, t := range session.RefinedTopics {
					btn := tgbotapi.NewInlineKeyboardButtonData(t, fmt.Sprintf("refined_%d", i))
					rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
				}
				// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
				exitBtn := tgbotapi.NewInlineKeyboardButtonData(" –í—ã–π—Ç–∏", "exit")
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(exitBtn))

				keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
				msg := tgbotapi.NewMessage(chatID, "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∏—Å—Ç–æ—Ä–∏—é? –ò–ª–∏ –Ω–∞–∂–º–∏ ¬´–í—ã–π—Ç–∏¬ª, –µ—Å–ª–∏ —Ö–≤–∞—Ç–∏—Ç :)")
				msg.ReplyMarkup = keyboard
				bot.Send(msg)

				continue
			}
			if data == "exit" {
				delete(sessions, chatID)
				bot.Send(tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! ‚ù§Ô∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏ /start"))
				continue
			}

		}

		if update.Message != nil && update.Message.IsCommand() {

			if update.Message.Command() == "start" {
				chatID := update.Message.Chat.ID

				topics, err := generatePopularTopics()
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º: "+err.Error()))
					return
				}

				sessions[chatID] = &Session{
					CurrentUser:     "first",
					CurrentQuestion: 0,
					Topics:          topics, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—ã –≤ —Å–µ—Å—Å–∏—é
				}
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–∞—á–∏–Ω–∞–µ–º! –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã '—Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è ___?'\n–ù–∞–∂–∏–º–∞–π –¥–∞ –∏–ª–∏ –Ω–µ—Ç.")
				bot.Send(msg)

				sendInterestQuestion(bot, update.Message.Chat.ID)
				continue
			}

			if update.Message != nil && update.Message.IsCommand() && update.Message.Command() == "next" {

				session := sessions[update.Message.Chat.ID]
				session.CurrentUser = "second"
				session.CurrentQuestion = 0

				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üîÑ –¢–µ–ø–µ—Ä—å –Ω–∞ —Ç–µ –∂–µ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫!")
				bot.Send(msg)

				sendInterestQuestion(bot, update.Message.Chat.ID)
				continue
			}
		}

	}
}
